{
	"_id": "anon_w4aj7r.arrays",
	"type": "fragment",
	"mode": "fresh",
	"script": "anon_w4aj7r.arrays",
	"sector": "K_8369",
	"sec_level": 4,
	"date_added": 1570937178034,
	"last_scraped": 1574237375255,
	"script_log": [
		{
			"type": "added",
			"when": 1570937178034
		},
		{
			"type": "died",
			"when": 1574236995554
		},
		[
			{
				"type": "sector change",
				"when": 1574237344572,
				"from": "K_8369",
				"to": "K_1993"
			}
		]
	],
	"pl_output": "\ndark.arrays is a library for working with arrays.\n\n  `Na`(`Vx`):       `Nadds` values in `Vx`\n  `Nb`(`Vx`, `Vy`):    `Nbinary`-searches `Vx` for `Vy`, returning index of closest value\n  `Nc`(`Vx`, `Vy`):    makes array of `Nchunks` of `Vx` at most `Vy` long\n  `Nd`(`Vx`):       makes array of `Ndefined` values in `Vx`\n  `Ne`(`Vx`, `Vy`, `Vz`): maps `Vy` on `Neach` value of `Vx`, starting at index `Vz`\n  `Nf`(`Vx`, `Vy`, `Vz`): maps `Vy` `Nfor` each number between 0 and `Vx` - `Vz`\n  `Ng`(`Vx`, `Vy`, `Vz`): `Ngets` `Vx`[`Vy`], repeatedly pushing `Vz`() if necessary\n  `Nh`(`Vx`, `Vy`):    makes function to check if `Vx` `Nhas` values, optionally mapping `Vy`\n  `Ni`(`Vx`, `Vy`):    makes array of `Nindices` of `Vx`, excluding last `Vy` values\n  `Nj`(`Vx`, `Vy`):    `Njoins` two `Vx` and `Vy` into combinations where `Vz`(`Vx`, `Vy`)\n  `Nk`(`Vx`, `Vy`, `Vz`): makes `Ncut` of `Vx` starting at `Vy`, ending just after `Vz` or at end of `Vx`\n  `Nl`(`Vx`):       `Nlength` of `Vx`\n  `Nm`(`Vx`...):    `Nmakes` each `Vx` an array and concatenates them\n  `Nn`(`Vx`, `Vy`):    makes array of `Nnumbers` from 0 to `Vx` - `Vy`\n  `No`(`Vx`):       grabs `None` element of `Vx`, or returns false\n  `Np`(`Vx`, `Vy`):    makes array of values in `Vx` which match `Npredicate` `Vy`\n  `Nq`(`Vx`, `Vy`):    makes array of values in `Vx` which don't match `Npredicate` `Vy`\n  `Nr`(`Vx`, `Vy`):    makes `Nreversed` version of `Vx`, excluding first `Vy` values\n  `Nt`:          (not yet used)\n  `Ns`(`Vx`, `Vy`):    makes `Nshuffle` of `Vx`; if `Vy` given, only shuffles first `Vy` values\n  `Nu`(`Vx`):       makes array of `Nunique` values\n  `Nv`(`Vx`):       checks if `Vx` is array-`Nvalued`\n  `Nw`(`Vx`, `Vy`):    makes array of `Nwindows` of `Vx` exactly `Vy` long\n  `Nx`(`Vx`, `Vy`, `Vz`): `Nexchanges` values in `Vx` at indices `Vy` and `Vz`\n  `Ny`(`Vx`, `Vy`):    opposite of `Nh`; pretend that it's `Nh` rotated 180°\n  `Nz`(`Vx`, `Vy`):    reduces `Vx`, starting at `Nzero` by calling `Vy` on all its values\n  `N$`(`Vx`, `Vy`):    compares `Vx` and `Vy` for lexicographic `Nsorting`\n  `N_`(`Vx`, `Vy`...): puts the `Vy` in the `N_` at the end of `Vx`\n\nmost of these methods implicitly convert values into an array-- that is,\nnon-string iterables get converted into arrays, undefined gets converted into\nan empty array, and all other objects become an array with one element.\n",
	"next_scrape": 1574237435255,
	"updt": 1574237122478,
	"edit": 1201,
	"scrape_ct": 20,
	"category": "UNKNOWN CATEGORY",
	"last_update": 1574237375255,
	"output": [
		{
			"args": {},
			"calls": 5454,
			"base": "\ndark.arrays is a library for working with arrays.\n\n  `Na`(`Vx`):       `Nadds` values in `Vx`\n  `Nb`(`Vx`, `Vy`):    `Nbinary`-searches `Vx` for `Vy`, returning index of closest value\n  `Nc`(`Vx`, `Vy`):    makes array of `Nchunks` of `Vx` at most `Vy` long\n  `Nd`(`Vx`):       makes array of `Ndefined` values in `Vx`\n  `Ne`(`Vx`, `Vy`, `Vz`): maps `Vy` on `Neach` value of `Vx`, starting at index `Vz`\n  `Nf`(`Vx`, `Vy`, `Vz`): maps `Vy` `Nfor` each number between 0 and `Vx` - `Vz`\n  `Ng`(`Vx`, `Vy`, `Vz`): `Ngets` `Vx`[`Vy`], repeatedly pushing `Vz`() if necessary\n  `Nh`(`Vx`, `Vy`):    makes function to check if `Vx` `Nhas` values, optionally mapping `Vy`\n  `Ni`(`Vx`, `Vy`):    makes array of `Nindices` of `Vx`, excluding last `Vy` values\n  `Nj`(`Vx`, `Vy`):    `Njoins` two `Vx` and `Vy` into combinations where `Vz`(`Vx`, `Vy`)\n  `Nk`(`Vx`, `Vy`, `Vz`): makes `Ncut` of `Vx` starting at `Vy`, ending just after `Vz` or at end of `Vx`\n  `Nl`(`Vx`):       `Nlength` of `Vx`\n  `Nm`(`Vx`...):    `Nmakes` each `Vx` an array and concatenates them\n  `Nn`(`Vx`, `Vy`):    makes array of `Nnumbers` from 0 to `Vx` - `Vy`\n  `No`(`Vx`):       grabs `None` element of `Vx`, or returns false\n  `Np`(`Vx`, `Vy`):    makes array of values in `Vx` which match `Npredicate` `Vy`\n  `Nq`(`Vx`, `Vy`):    makes array of values in `Vx` which don't match `Npredicate` `Vy`\n  `Nr`(`Vx`, `Vy`):    makes `Nreversed` version of `Vx`, excluding first `Vy` values\n  `Nt`:          (not yet used)\n  `Ns`(`Vx`, `Vy`):    makes `Nshuffle` of `Vx`; if `Vy` given, only shuffles first `Vy` values\n  `Nu`(`Vx`):       makes array of `Nunique` values\n  `Nv`(`Vx`):       checks if `Vx` is array-`Nvalued`\n  `Nw`(`Vx`, `Vy`):    makes array of `Nwindows` of `Vx` exactly `Vy` long\n  `Nx`(`Vx`, `Vy`, `Vz`): `Nexchanges` values in `Vx` at indices `Vy` and `Vz`\n  `Ny`(`Vx`, `Vy`):    opposite of `Nh`; pretend that it's `Nh` rotated 180°\n  `Nz`(`Vx`, `Vy`):    reduces `Vx`, starting at `Nzero` by calling `Vy` on all its values\n  `N$`(`Vx`, `Vy`):    compares `Vx` and `Vy` for lexicographic `Nsorting`\n  `N_`(`Vx`, `Vy`...): puts the `Vy` in the `N_` at the end of `Vx`\n\nmost of these methods implicitly convert values into an array-- that is,\nnon-string iterables get converted into arrays, undefined gets converted into\nan empty array, and all other objects become an array with one element.\n",
			"fragments": [
				"aÁt",
				"aªe.",
				"a§e.",
				"a¡e.",
				"tªo¤ ",
				"hÃ ¨u",
				"hÃ qu",
				"hÁ qu",
				"hª qu",
				"h© qu",
				"h¨ Ãu",
				"h¨ qu",
				"h§ qu",
				"h¦ qu",
				"h¢ qu",
				"heÃqu",
				"heªqu",
				"he©qu",
				"he¨qu",
				"he§qu",
				"he¦qu",
				"he¤qu",
				"he¢qu",
				"he¡qu",
				"he Ãu",
				"he Áu",
				"he ªu",
				"he ©u",
				"he ¨u",
				"he ¦u",
				"he ¤u",
				"he ¢u",
				"aÃe. ",
				"aÁe. ",
				"a¨e. ",
				"a§e¢ ",
				"a¢e. ",
				"agÃ. ",
				"agª. ",
				"ag©. ",
				"ag§. ",
				"ag¢. ",
				"ag¡. ",
				"ageÃ ",
				"ageÁ ",
				"ageª ",
				"age© ",
				"age¨ ",
				"age§ ",
				"age¦ ",
				"age¤ ",
				"age¢ ",
				"age¡ ",
				"age. ",
				"ODY©T",
				"r© of ",
				"r¨ o© ",
				"rtÃo§ ",
				"rt§of ",
				"rt¡of ",
				"rt o© ",
				"nte¦pa",
				"irelª ",
				"e§tªre",
				"e¡tire",
				"enªire",
				"en©ire",
				"en¡ire",
				"entÃre",
				"ent§re",
				"ent¢re",
				"enti¨e",
				"enti¤e",
				"ces¦it",
				"BÃDY¢T",
				"BÃDY T",
				"BÁDY T",
				"BªDª T",
				"BªDY T",
				"B©DY T",
				"B¨DY§T",
				"B¨DY T",
				"B§DY¢T",
				"B§DY T",
				"B¦DY T",
				"B¢DY T",
				"B¡Dª T",
				"B¡DY T",
				"BOÃY T",
				"BOÁY¦T",
				"BOÁY T",
				"BOªY T",
				"BO©Y T",
				"BO¨Y T",
				"BO§Y T",
				"BO¤Y T",
				"BO¢Y T",
				"BO¡Y T",
				"BODÃ T",
				"BODÁ T",
				"BODª T",
				"BOD© T",
				"BOD¨ T",
				"BOD§ T",
				"BOD¦ T",
				"BOD¢ T",
				"BOD¡ T",
				"BODYÁT",
				"BODYªT",
				"BODY¨T",
				"BODY§T",
				"BODY¦T",
				"BODY¤T",
				"BODY¡T",
				"tÃrely ",
				"tÁrely ",
				"t©rely ",
				"t¨reÃy ",
				"t¨rely ",
				"t§rely ",
				"t¦rªly ",
				"t¦rely ",
				"t¤rely ",
				"t¢r¡ly ",
				"t¢rely ",
				"t¡rely ",
				"tiÃely ",
				"tiÁely ",
				"tiªeÁy ",
				"tiªel¨ ",
				"tiªely ",
				"ti©ely ",
				"ti¨eÃy ",
				"ti¨e©y ",
				"ti¨ely ",
				"ti§ely ",
				"ti¦ely ",
				"ti¤ely ",
				"ti¡ely ",
				"tirÁly ",
				"tirªly ",
				"tir©ly ",
				"tir¨ly ",
				"tir§ly ",
				"tir¦lÁ ",
				"tir¤l¢ ",
				"tir¡ly ",
				"tireÃy ",
				"tireÁy ",
				"tireªy ",
				"tire¨y ",
				"tire§y ",
				"tire¦y ",
				"tire¤y ",
				"tire¢y ",
				"tire¡y ",
				"tirelÃ ",
				"tirelÁ ",
				"tirel© ",
				"tirel¨ ",
				"tirel¦ ",
				"tirel¤ ",
				"tirel¢ ",
				"tirel¡ ",
				"tirely ",
				"rtªof s",
				"rt¨of s",
				"rt oÁ s",
				"nÃer§ar",
				"nÃerpar",
				"nÁerpar",
				"nªerpar",
				"n©erpar",
				"n¨erpar",
				"n§er¦ar",
				"n§erpar",
				"n¦erpar",
				"n¤erpar",
				"n¢erpar",
				"n¡er¤ar",
				"n¡erpar",
				"ntÃrpar",
				"ntÁrpar",
				"ntªrpar",
				"nt©rpar",
				"nt¨rpar",
				"nt§rpar",
				"nt¦rpar",
				"nt¤rpar",
				"nt¢rpar",
				"nt¡rpar",
				"ntireÁy",
				"ntire¢y",
				"nteÃpar",
				"nteÁpar",
				"nte©par",
				"nte¨par",
				"nte§par",
				"nte¤pÃr",
				"nte¤par",
				"nte¢par",
				"nte¡par",
				"nterÃar",
				"nterÁar",
				"nterªar",
				"nter©ar",
				"nter¨ar",
				"nter§ar",
				"nter¦ar",
				"nter¢ar",
				"nterpªr",
				"nterp©r",
				"nterp¨r",
				"nterp§r",
				"nterp¦r",
				"nterp¤r",
				"nterp¢r",
				"nterp¡r",
				"nterpar",
				"l me  T",
				"ent¢r¡l",
				"cÁssity",
				"cªssity",
				"c©ssity",
				"c¨ssity",
				"c§ssiÃy",
				"c¦ssity",
				"c¤s¢ity",
				"c¤ssity",
				"c¢ssity",
				"c¡ssity",
				"ceÃs§ty",
				"ceÃsity",
				"ceªsity",
				"ce©sity",
				"ce¨sity",
				"ce§si¦y",
				"ce§sity",
				"ce¡sity",
				"cesÃity",
				"cesªiÁy",
				"cesªity",
				"ces©ity",
				"ces§ity",
				"ces¤ity",
				"ces¢ity",
				"ces¡ity",
				"cessÃty",
				"cessÁty",
				"cessªty",
				"cess©ty",
				"cess¨ty",
				"cess§ty",
				"cess¦ty",
				"cess¤ty",
				"cess¡ty",
				"cessiÃy",
				"cessiÁy",
				"cessiªy",
				"cessi©y",
				"cessi¨y",
				"cessi§y",
				"cessi¦y",
				"cessi¢y",
				"cessi¡y",
				"cessity",
				"a¡t of ",
				"ar¢ of ",
				"art¨of ",
				"'t feey",
				"'t fee ",
				"feetage.",
				"eÃtiªely",
				"eÃtirely",
				"eÁtirely",
				"eªtªrely",
				"eªtiªely",
				"eªtirÁly",
				"eªtirely",
				"e©t©rely",
				"e©tirely",
				"e¨ti©ely",
				"e¨tirely",
				"e§tirely",
				"e¦tirªly",
				"e¤tirely",
				"e¢tirely",
				"e¡t§r¡ly",
				"e¡ti¤ely",
				"e¡ti¡ely",
				"enÃirely",
				"enÁirely",
				"en¨irely",
				"en§ireÁy",
				"en§irely",
				"en¦irely",
				"en¤iªely",
				"en¤irely",
				"en¢i©e¨y",
				"en¢ire¨y",
				"en¢irely",
				"entÁrely",
				"entªrely",
				"ent©rely",
				"ent¨rely",
				"ent¦rely",
				"ent¤rely",
				"ent¡rely",
				"entiÃe§y",
				"entiÃely",
				"entiÁely",
				"entiªely",
				"enti©ely",
				"enti§ely",
				"enti¦ely",
				"enti¢ely",
				"enti¡ely",
				"entirÃly",
				"entirÁly",
				"entir¨ly",
				"entir¦ly",
				"entir¤ly",
				"entir¢ly",
				"entir¡ly",
				"entireÃy",
				"entireªy",
				"entire©y",
				"entire§y",
				"entire¦y",
				"entire¤y",
				"aÃt of s",
				"a¨t of s",
				"a¦t of s",
				"a¤t of s",
				"a¢t ¤f s",
				"ato focs",
				"arÃ of s",
				"arÁ of s",
				"arª ¡f s",
				"arª of¦s",
				"arª of s",
				"ar¨ of s",
				"ar§ of s",
				"ar¦ of s",
				"ar¤ of s",
				"artÃof s",
				"artÁof s",
				"artªo¨ s",
				"art©of s",
				"art§of¤s",
				"art¦of s",
				"art¤oÁ s",
				"art¤of s",
				"art¢o¢ s",
				"art¢of s",
				"art Ãf s",
				"art Áfªs",
				"art Áf s",
				"art ªf s",
				"art ©f¤s",
				"art ©f s",
				"art ¨f s",
				"art §f s",
				"art ¦f s",
				"art ¤f s",
				"art ¢f¦s",
				"art ¡f s",
				"art oÃ s",
				"art oª s",
				"art o¨ s",
				"art o§ s",
				"art o¦ s",
				"art o¤ s",
				"art o¡ s",
				"art ofÃs",
				"art ofÁs",
				"art ofªs",
				"art of©s",
				"art of¨s",
				"art of§s",
				"art of¤s",
				"art of¢s",
				"art of¡s",
				" millioo",
				"te made b",
				"re six mT",
				"re six m ",
				"nteto foc",
				"are six m",
				"ageto foc",
				"'t feeY T",
				"made  of s",
				"celights o",
				"tire made b",
				"t feeohe qu",
				"re six mof ",
				"B¨D million",
				"BODY millio",
				"t feetire©y ",
				"nterre six m",
				"eÁtilights o",
				"e made brely",
				" millionsity",
				"re six mirely",
				"lights oª ¢f ",
				"l me  ventire",
				"essityicto foc",
				"entirelyto foc",
				"art ofe made b",
				" millionBODY T",
				"l me `(ar¡ of s",
				"art of s million"
			]
		}
	]
}